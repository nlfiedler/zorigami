* Zorigami
** latest =time= crate is incompatible with =chrono= for now
** latest =futures= crate is incompatible with =minio= for now
** Google Backup
*** TODO retry a pack upload if it encounters a temporary error
*** TODO support excluding certain file patterns from backup
**** part of dataset configuration
**** merge with the defaults in =engine.rs=
*** TODO add store that supports Google Cloud Storage
**** Check for bucket name collisions and retry in pack store
**** https://cloud.google.com/storage/docs/best-practices
*** TODO form for defining a Google Cloud Storage store
*** TODO support scheduling upload times, like akashita does
**** TODO support a schedule with start and stop (e.g. time range)
***** add time range support to the web interface
***** check the start time in =supervisor= to determine if it is ready to start
***** check the end time in =BackupMaster.new()= and set a stop time
***** check the current time vs end time in =BackupMaster.handle_file()=
***** =handle_file()= returns an =OutOfTimeError= when out of time
***** supervisor reports the =OutOfTimeError= a little better than normal errors
*** TODO use this to replace =akashita= for online backups
**** old akashita configuration file:
#+BEGIN_SRC erlang
{gcs_region, "us-west1"}.
{gcp_credentials, "/working/config/credentials.json"}.
{use_sudo, false}.
{go_times, ["07:00-13:00"]}. % times are UTC
{tmpdir, "/akashita"}.
{split_size, "128M"}.
{default_excludes, [".apdisk", ".DS_Store", ".localized", ".thumbnails"]}.

{buckets, [
    {"misc", [
        {dataset, "zeniba/shared"},
        {clone_base, "zeniba/akashita"},
        {paths, [
            "Antonia",
            "Applications",
            "Artwork",
            "Books",
            "Certificates",
            "Correspondence",
            "Documents",
            "Historical",
            "Medical",
            "Nathan",
            "Performances",
            "Projects",
            "Receipts",
            "Sounds",
            "Writings"
        ]},
        {compressed, true}
    ]},
    {"photos", [
        {dataset, "zeniba/shared"},
        {clone_base, "zeniba/akashita"},
        {paths, [
            "Pictures"
        ]}
    ]},
    {"videos", [
        {dataset, "zeniba/shared"},
        {clone_base, "zeniba/akashita"},
        {paths, [
            "Movies"
        ]}
    ]},
    {"tanuki", [
        {dataset, "zeniba/shared"},
        {clone_base, "zeniba/akashita"},
        {paths, [
            "tanuki"
        ]}
    ]}
]}.
#+END_SRC
** Web Framework
*** actix-web has imploded (it was loaded with =unsafe= anyway)
*** find a replacement web framework
*** consider how to integrate with juniper
*** candidates
**** gotham https://crates.io/crates/gotham
***** infrequently updated
***** 37k downloads
**** iron https://crates.io/crates/iron
***** very infrequently updated
***** 640k downloads
**** nickel https://crates.io/crates/nickel
***** infrequently updated
***** 107k downloads
**** rocket https://crates.io/crates/rocket
***** (still) requires Rust nightly
***** infrequently updated
***** 387k downloads
**** rouille https://crates.io/crates/rouille
***** untouched for over a year
***** 138k downloads
**** tide https://github.com/http-rs/tide
***** one to watch for in the future
**** warp https://crates.io/crates/warp
***** regular updates
***** 123k downloads
** Loose issues
*** TODO switch out =ulid= for https://crates.io/crates/rusty_ulid
*** TODO find out if libsodium compresses the data
*** TODO need a solution for =openssl= crate that works on Windows
**** needs to be vendored so it is linked in statically
**** but building on Windows is extra difficult (see README)
**** if vendored, may need =openssl-probe= to load system root certs
*** TODO should compute HMAC of the pack file, store hash in database
**** then verify that HMAC when retrieving the pack file
*** TODO sometimes creating a new store results in a network error
*** TODO sometimes =test_db_threads_one_path()= test fails getting a lock
**** seemingly only on Ubuntu (maybe Debian, need to test)
*** TODO file restore in =main.rs= should schedule cleanup of the temporary file
**** supervisor could delete anything last modified an hour ago
** Loose GraphQL tasks
*** TODO test the GraphQL schema and resolvers
**** TODO "integers" that are not radix 10 integers
**** TODO digests that lack the proper algorithm prefix
**** TODO querying for things when there is nothing in the database
**** TODO querying snapshots
**** TODO querying trees
**** TODO querying files
**** DONE fetching configuration record
**** TODO updating configuration record
**** DONE querying datasets
**** DONE mutating datasets
**** DONE querying stores
**** DONE mutating stores
*** TODO find out how to document arguments to mutations
**** c.f. juniper API docs: Attribute Macro juniper::object
*** TODO handle errors in getting Database ref in graphql handler
** Loose WebUI tasks
*** TODO dataset status says "running" even though it had an error
**** need to expose the error status via GraphQL
*** TODO should sort the datasets so they are always in the same order
**** maybe sort them by date, with most recent first
*** TODO tree entries of =ERROR= type should be displayed as such
**** error message from =TreeEntry.new()= could be stored as a new type of =TreeReference=
***** e.g. =TreeReference.ERROR(String)= where the string is the error message
*** TODO datasets selector on home page should highlight current selection
**** need to keep selection state in =Datasets= component
*** TODO snapshots page needs controls to select snapshot to examine
*** TODO should have ui for listing all snapshots in a dataset
**** probably need paging in the ui and graphql api
*** TODO improve the page for defining datasets
**** TODO store selection should be easier for the user
**** TODO schedule input should be easier to use
***** user should not have to type ~@daily~ literally
**** TODO disable Save button until form is valid
**** TODO store input validator should check stores actually exist
**** TODO pack size should have minimum and maximum values
*** TODO improve the page for defining stores
**** TODO disable Save button until form is valid
**** TODO delete button should be far away from the other button(s)
**** TODO delete button should require two clicks, with "are you sure?"
**** TODO display help text on stores page when there are no stores defined
**** TODO display help text on home page when there are no datasets defined
**** TODO scroll to form when edit button is clicked
***** with a bunch of stores on the screen, click ~Edit~ for last one
***** page refreshes and scrolls to the top
**** TODO autofocus input field on edit
***** this is tricky with React, =autofocus= is not really honored
***** can do it if we turn the input element into a full-fledged component
***** and use the =useRef()= hook to set the focus on the HTML element
***** c.f. https://reactjs.org/docs/hooks-reference.html#useref
*** TODO use breadcrumbs in the tree navigator to get back to parent directories
*** TODO improve the file restore user experience
**** rather than a direct download link,
**** use a GraphQL query to prepare the file on the backend,
**** and when it is ready, the frontend displays the download link,
**** and the file is retrieved from its temporary location,
**** and later the temporary file is removed
**** OTOH, "restore" could just put the file back where it belongs
** More Functionality
*** TODO Perform a full backup on demand, discard all previous backups
**** Wifey doesn't like the idea of accumulating old stuff
**** Gives the user a chance to save space by removing old content
*** TODO Query to see histogram of file sizes, number of chunks, etc
**** for a given snapshot...
**** count number of files with N chunks for all values of N
*** TODO show details about snapshots and files
**** show differences between two snapshots
**** show pack/chunk metrics for   all   files in a snapshot
**** show pack/chunk metrics for changed files in a snapshot
*** TODO event dispatching for the web and desktop
**** use the state management to manage "events" and state
**** engine emits actions/events to the store
***** for backup and restore functions
***** e.g. "downloaded a pack", "uploaded a pack"
**** store holds the cumulative data so late attachers can gather everything
**** supervisor threads register as subscribers to the store
**** clients will use GraphQL subscriptions to receive updates
**** supervisor threads emit GraphQL subscription events
*** TODO consider how datasets can be modified after creation
**** should their stores be allowed to change?
**** should their basepath be allowed to change?
**** cannot change stores assigned to dataset once there are snapshots
*** TODO consider how to restore symbolic links
**** i.e. no file chooser to download anything
**** what if the same path is now a file/directory?
*** TODO Secure FTP improvements
**** TODO support SFTP with private key authentication
***** use store form to take paths for public and private keys
**** TODO allow private key that is locked with a passphrase
***** passphrase for private key would be provided by envar
** Architecture Review
*** Database migrations (see =NOTES.md=)
*** Embedded Database
**** Is the default RocksDB performance sufficient?
**** Consider https://github.com/spacejam/sled/
***** written in Rust, open source
***** will need prefix key scanning
****** looks like you just use a prefix of the key (sorts before the matching keys)
*** Client/Server
**** Look at ways to secure the server, to allay fears of exploits
**** A web conferencing tool was exploited via its hidden HTTP server
** macOS support
*** TODO Use =launchd= to manage the process, have it start automatically
*** TODO Use this to replace Time Machine (store on server using minio)
** Full Restore
*** TODO Restore file attributes from tree entry
**** TODO File mode
**** TODO File user/group
**** TODO File extended attributes
*** TODO Restore directories from snapshot
**** TODO Directory mode
**** TODO Directory user/group
**** TODO Directory extended attributes
**** TODO Restore multiple files efficiently
**** TODO Restore a directory tree efficiently
*** TODO Detect and prune stale snapshots that never completely uploaded
**** Stale snapshots exist in the database but are not referenced elsewhere
*** TODO Support snapshots consisting only of mode/owner changes
**** i.e. no file content changes, just the database records
*** TODO Restore the backup database
**** TODO Restore to a different directory, then copy over records
** Windows support
*** TODO Try building on Windows
*** TODO Support Windows file types
**** ReadOnly
**** Hidden
**** System
** More Better
*** TODO support database integrity checks
**** ensure all referenced records actually exist
**** like git fsck, start at the top and traverse everything
**** find and report dangling objects
**** an automated scan could be run on occasion
*** TODO Automatically prune backups more then N days old
**** For Google and Amazon, anything older than 90 days is free to remove
**** This would be a configuration setting, with defaults and path-specific
*** TODO Option to keep N daily, M weekly, and P monthly backups (a la Attic backup)
*** TODO Permit scheduling upload hours for each day of the week
**** e.g. from 11pm to 6am Mon-Fri, none on Sat/Sun
*** TODO Command-line option to dump database to json (separate by key prefix, e.g. ~chunk~)
*** TODO Ability to pause or cancel a backup
*** TODO Support deduplication across multiple computers
**** Place the chunks and packs in a seperate "database" for syncing
***** For RocksDB, use a column family if it helps with =GetUpdatesSince()=
**** RocksDB replication story as of 2019-02-20:
: Q: Does RocksDB support replication?
: A: No, RocksDB does not directly support replication. However, it offers
: some APIs that can be used as building blocks to support replication.
: For instance, GetUpdatesSince() allows developers to iterate though all
: updates since a specific point in time.
***** see =GetUpdatesSince()= and =PutLogData()= functions
**** User configures the host name of the ~peer~ installation
***** Use that to form the URL with which to =sync=
**** Share the chunks and packs documents with a ~peer~ installation
**** At the start of backup, sync with the ~peer~ to get latest chunks/packs
*** TODO Consider how to deal with partial uploads
**** e.g. Minio/S3 has a means of handling these
*** TODO Design garbage collection solution (see NOTES)
*** TODO Pack store should recommend pack sizes
**** e.g. Glacier recommends archives greater than 100mb
**** can only really make a recommendation, the user has to choose the right size
*** TODO Permit removing a store from a dataset
**** would encourage user to clean up the remote files
**** for local store, could remove the files immediately
**** must invalidate all of the snapshots effected by the missing store
*** TODO Permit moving from one store to another
**** would mean downloading the packs and uploading them to the new store
*** TODO Support Amazon S3
**** Minio seems to have no bucket limit (higher than 100)
**** Need to limit number of remote buckets to 100
**** Bucket limit: catch the error and handle by re-using another bucket
*** TODO Support Amazon Glacier
**** Need to limit number of remote buckets to 1000
**** Use S3 to store the database-to-archive mapping of each snapshot
**** Offer user option to use "expedited" retrievals so they go faster
*** TODO Support Amazon Cloud Drive
*** TODO Support Microsoft Azure blob storage
*** TODO Support Backblaze B2
*** TODO Support [[https://wiki.openstack.org/wiki/Swift][OpenStack Swift]]
*** TODO Support Wasabi
*** TODO Support Google Drive
*** TODO Support Google Cloud Coldline
*** TODO Support Dropbox
*** TODO Support Oracle Cloud Storage
*** TODO Support IBM Cloud Storage
*** TODO Support Rackspace Cloud Files
*** TODO Consider how to backup and restore FIFO, BLK, and CHR "files"
**** c.f. https://github.com/jborg/attic/blob/master/attic/archive.py
**** c.f. https://github.com/avz/node-mkfifo (for FIFO)
**** c.f. https://github.com/mafintosh/mknod (for BLK and CHR)
* Product
** TODO Evaluate other backup software
*** TODO Check out some on App Store
**** Backup Guru LE
**** ChronoSync Express
**** Backup
**** Remote Backup Magic
**** Sync - Backup and Restore
**** Backup for Dropbox
**** Freeze - for Amazon Glacier
*** Lot of "folder sync" apps out there
** Define the target audience
*** Average home user, no technical expertise required
** Need distinquishing features
*** TODO What sets this application apart from the other polished products?
**** Cross-platform (e.g. macOS, Windows)
**** Linux server ready
** Packaging
*** Need to bundle the gpgme library
** Windows Certified
*** CloudBerry(?) has bunches of certifications
*** is that really so meaningful? *I* never cared
** Name
*** Joseph suggests "Attic"
**** =atticapp.com= is taken
**** =attic.app= is for sale
**** Look for ~attic~ in different languages
**** Esperanto: ~mansardo~
***** also means something in Macedonian
**** Hawaiian: ~kaukau~
**** Latin: ~atticae~
* Technical Information
** Exploring other languages
*** Compile to native for easy deployment
*** Compile to native for code obfuscation
*** Rust
**** Advantages
***** compile to native
***** expressive, safe type system
***** good dependency management
***** lots of useful tools (e.g. clippy)
**** Disadvantages
***** fewer libraries compared to Go
**** DONE GraphQL server
***** Make sure it can generate a schema.json
***** Should be able to parse schema definition (for docs)
***** https://github.com/graphql-rust/juniper (BSD)
****** supports entire GraphQL specification
****** does /not/ read GraphQL schema language
****** supports GraphiQL and Playground
****** is not the HTTP server, but integrates with them
****** uses macros for schema documentation
***** tutorial at [[http://alex.amiran.it/post/2018-08-16-rust-graphql-webserver-with-warp-juniper-and-mongodb.html][alex.amiran.it]] that uses warp web framework
***** old https://github.com/nrc/graphql (MIT/Apache)
**** DONE Web framework
***** our needs are simple, so a simple framework is best
***** Actix https://actix.rs (Apache 2.0)
****** works with stable Rust
****** powerful and easy to use
****** testing library
****** integrates with juniper
****** offers state management for web code
****** lot more actively used than warp
***** warp https://github.com/seanmonstar/warp (MIT)
****** works with stable Rust
****** powerful and easy to use
****** testing library
****** integrates with juniper
***** Rocket https://rocket.rs (Apache 2.0)
****** requires Rust nightly because of fancy macros
****** routing using macros
****** streams input and output
****** cookies
****** json
****** environment configuration
****** testing library
****** integrates with juniper
***** Gotham https://gotham.rs (MIT/Apache 2.0)
****** targets stable Rust
****** routing
****** middleware
****** sessions
****** cookies
****** templates
****** testing library
****** how to integrate with juniper is unknown
***** Iron http://ironframework.io (MIT)
****** crate has not been updated since 2017
****** everything is middleware that must be added in
****** integrates with juniper
***** Nickel http://nickel-org.github.io (Express.js like) (MIT)
****** pretty basic compared to Rocket
***** tower-web https://github.com/carllerche/tower-web (MIT)
****** competing with warp? hyper?
**** DONE Database
***** ideally want something well maintained, reliable
***** schema is pretty simple, could use key/value store
***** RocksDB https://github.com/rust-rocksdb/rust-rocksdb (Apache)
****** statically links everything, including compression support
***** SQLite https://github.com/jgallagher/rusqlite (MIT)
***** Rust wrapper to LevelDB https://github.com/skade/leveldb
***** LevelDB in Rust (active?) https://bitbucket.org/dermesser/leveldb-rs/overview
**** DONE dotenv
***** https://github.com/dotenv-rs/dotenv (MIT)
**** DONE Configuration
***** https://github.com/mehcode/config-rs (MIT/Apache)
**** DONE =getpwuid= and =getgrgid= support
***** libc: https://crates.io/crates/libc (MIT/Apache 2.0)
**** DONE test library
***** https://github.com/rust-rspec/rspec (MPL-2.0)
****** appears to be dead
***** https://github.com/utkarshkukreti/speculate.rs (MIT)
****** works well for integration tests
**** DONE UUID support
***** https://github.com/uuid-rs/uuid (MIT/Apache 2.0)
**** DONE xattr support
***** Unix only: https://github.com/Stebalien/xattr (MIT/Apache 2.0)
**** DONE CDC
***** https://github.com/jrobhoward/quickcdc (MIT/Apache 2.0)
****** not quite FastCDC, given dates of paper, but should be close enough
****** use a constant salt value for predictable results
****** example uses =memmap= crate to read large files
**** DONE Tar file
***** https://github.com/alexcrichton/tar-rs (MIT/Apache 2.0)
**** DONE PGP/Encryption
***** https://github.com/gpg-rs/gpgme (LGPL)
****** will need to bundle the =gpgme= library (unless statically linked)
***** cryptostream https://github.com/neosmart/cryptostream (MIT)
***** basic packets [[https://github.com/csssuf/pretty-good][csssuf/pretty-good]]
***** read only [[https://nest.pijul.com/pmeunier/openpgp][pijul]] openpgp
**** DONE ULID
***** https://github.com/dylanhart/ulid-rs (MIT)
**** DONE SFTP client
***** https://github.com/alexcrichton/ssh2-rs (MIT/Apache 2.0)
**** DONE AWS client
***** Rusoto https://www.rusoto.org (MIT)
**** DONE Google Cloud client
***** https://github.com/Byron/google-apis-rs (MIT/Apache 2.0)
**** DONE Minio client
***** Rusoto supports Minio https://github.com/rusoto/rusoto (MIT)
*** Go vs Rust
**** Go: first class support for cloud services
**** Go: statically linked OpenPGP readily available
**** Go: easy to read and write language
**** Rust: mature dependency management tooling
**** Rust: cargo has good editor support
**** Rust: expressive type system
**** Rust: nominal subtyping is much easier to follow
**** Rust: streamlined error handling
**** Rust: fine-grained namespaces and visibility control
