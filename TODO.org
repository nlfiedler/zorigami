* Tasks
** latest =time= crate is incompatible with =chrono= for now
** Update rusoto to latest
*** with 0.43 they use std future now instead of futures
*** remove the =futures= and =futures-fs= crates
*** look at the rusoto_s3 API documentation to figure out how to use it now
** Flutter Action Plan
*** cookbooks reference: https://flutter.dev/docs/cookbook
*** TODO implement interface using clean architecture
**** DONE prep work
***** DONE copy https://github.com/LiewLi/result and make it better, more Rust-like
***** DONE make an =Option= type like Rust
***** DONE define the features for organizing the code
1) backup: defining entities
2) browse: viewing snapshots
3) restore: restoring entries
**** DONE domain
***** DONE define the entities
***** DONE define the repository contract
***** DONE define the use cases
***** DONE use TDD and mock objects to test everything
***** DONE get all pack stores
***** DONE define a pack store
***** DONE update a pack store
***** DONE delete a pack store
***** DONE do all that for data sets
***** DONE do all that for snapshots
***** DONE do all that for trees
***** DONE do all that for configuration info
**** DONE data
***** DONE define the models
****** DONE pack store
****** DONE data set
****** DONE configuration
****** DONE tree
****** DONE snapshot
***** DONE implement the repositories
****** DONE pack store
****** DONE data set
****** DONE configuration
****** DONE tree
****** DONE snapshot
***** DONE develop the (GraphQL) data source
****** DONE pack store
****** DONE data set
****** DONE configuration
****** DONE tree
****** DONE snapshot
**** DONE preso
***** DONE set up the page routing
****** c.f. https://flutter.dev/docs/development/ui/navigation
****** every page or screen will be based on a =Scaffold=
****** each page will incorporate a navigation rail or a back button
****** define the home page to hold the configuration and snapshot browser
****** title in appbar should be the page title
***** DONE make a navbar or navigation rail
****** c.f. https://www.material.io/components/navigation-rail/
***** DONE allow browsing the dataset snapshots
***** DONE allow browsing the snapshot tree
***** DONE add a button for restoring the first selected file
****** currently using an =href= to the URL that returns the file
******* =/restore/{dataset.key}/{checksum}/{entry.name}=
****** use https://pub.dev/packages/url_launcher, it supports web
******* https://levelup.gitconnected.com/flutter-hyperlinks-d2eee3fd24f
******* uses =url_launcher= and =universal_html= to support web and mobile
******* note that safari requies a JS hack, but only if using the =openLink= functions?
****** can use =Window.open()= from =dart:html=, like =window.open(url);=
******* by default it opens a new window/tab for the link
***** DONE query for stores, show in a list
***** DONE show details of a pack store
****** DONE write a factory that builds out details for each kind of store
****** DONE write impl for local pack store
****** DONE write impl for minio pack store
****** DONE write impl for sftp pack store
***** DONE allow editing a pack store
****** use https://pub.dev/packages/flutter_form_builder for forms and validation
****** define new events in the pack stores bloc for edit and delete
****** show a "loading" thing while submitting the changes
****** ensure that the basic form can be reused for defining a new store
****** consider how to unit test the pack store forms
****** DONE write impl for local pack store
****** DONE write impl for minio pack store
****** DONE write impl for sftp pack store
***** DONE support defining a new pack store
***** DONE allow deleting a pack store
***** DONE show all datasets
***** DONE show details of a dataset
***** DONE support defining a new dataset
***** DONE allow deleting a dataset
***** DONE allow editing a dataset
***** DONE show status of the datasets on the home page
**** DONE add missing bloc unit tests
**** DONE add error cases to the bloc tests
**** TODO user performance tools to see why some screens transition slowly
*** TODO document decision to use clean architecture
**** c.f. https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html
**** Clean Architecture is suitable for large and small applications
**** Based on [[https://en.wikipedia.org/wiki/SOLID][SOLID]] principles
**** Clean Architecture notes
***** 3 layers
****** preso (presentation: i.e. widgets)
****** domain (business logic: entities, use cases, repo interface)
****** data (repo impl, data models, data sources)
***** tdd-clean-architecture tutorial
****** the "presentation logic holders" is where BLoC sits
***** widgets use presentation logic holder (BLoC), do not interact with domain/data layers
***** c.f. https://www.didierboelens.com/2018/08/reactive-programming---streams---bloc/
***** c.f. https://bloclibrary.dev/
***** VS Code bloc extension: =FelixAngelov.bloc=
***** c.f. https://resocoder.com/category/tutorials/flutter/tdd-clean-architecture/
***** c.f. https://github.com/ResoCoder/flutter-tdd-clean-architecture-course
***** c.f. https://resocoder.com/2019/10/26/flutter-bloc-library-tutorial-1-0-0-stable-reactive-state-management/
*** TODO figure out how to manage the GraphQL endpoint
**** using a relative endpoint is not supported by the package
**** currently hard-coded to =127.0.0.1:8080= in the code
**** the following code will likely work in production mode
***** in development mode, it prints the flutter/chrome webdev address
#+BEGIN_SRC dart
import 'dart:html';
var url = window.location.href;
#+END_SRC
**** the compile-time dependency injection in [[https://pub.dev/packages/injectable][injectable]] may be helpful here
*** TODO update =Dockerfile= to build flutter web ui
*** TODO document how to test, build, run, etc
**** =flutter build web= for release build
**** =flutter run -d chrome= for development
**** =flutter test= for testing
*** DONE remove all of the old webui files
**** =bsconfig.json=
**** =graphql_schema.json=
**** =gulpfile.js=
**** =node_modules=
**** =package.json=
**** =package-lock.json=
**** =public=
**** =src/*.re=
**** =lib/js=
**** =lib/bs=
**** update =.gitignore= and =.dockerignore=
**** update =README.md= file regarding Node, Reason, etc
**** update =NOTES.md= file regarding everything
** Advanced Scheduling
*** TODO frontend
**** TODO Support multiple schedules in interface
**** TODO Support day-of-week in schedule
**** TODO Support day-of-month in schedule
**** TODO Support week-of-month in schedule
**** TODO Support time-range in schedule
*** TODO backend
**** Supervisor needs to consider start time in the time range (if any)
**** =BackupMaster= needs to calculate the stop time in =new()=
**** if stop time is reached in =BackupMaster.handle_file()= then raise =OutOfTimeError=
**** supervisor to report the =OutOfTimeError= a little better than normal errors
** Online Backup
*** TODO retry a pack upload if it encounters a temporary error
*** TODO support excluding certain file patterns from backup
**** part of dataset configuration
**** merge with the defaults in =engine.rs=
*** TODO add store that supports Google Cloud Storage
**** Check for bucket name collisions and retry in pack store
**** https://cloud.google.com/storage/docs/best-practices
*** TODO add form for defining a Google Cloud Storage store
*** TODO use this to replace =akashita= for online backups
**** old akashita configuration file:
#+BEGIN_SRC erlang
{gcs_region, "us-west1"}.
{gcp_credentials, "/working/config/credentials.json"}.
{use_sudo, false}.
{go_times, ["07:00-13:00"]}. % times are UTC
{tmpdir, "/akashita"}.
{split_size, "128M"}.
{default_excludes, [".apdisk", ".DS_Store", ".localized", ".thumbnails"]}.

{buckets, [
    {"misc", [
        {dataset, "zeniba/shared"},
        {clone_base, "zeniba/akashita"},
        {paths, [
            "Antonia",
            "Applications",
            "Artwork",
            "Books",
            "Certificates",
            "Correspondence",
            "Documents",
            "Historical",
            "Medical",
            "Nathan",
            "Performances",
            "Projects",
            "Receipts",
            "Sounds",
            "Writings"
        ]},
        {compressed, true}
    ]},
    {"photos", [
        {dataset, "zeniba/shared"},
        {clone_base, "zeniba/akashita"},
        {paths, [
            "Pictures"
        ]}
    ]},
    {"videos", [
        {dataset, "zeniba/shared"},
        {clone_base, "zeniba/akashita"},
        {paths, [
            "Movies"
        ]}
    ]},
    {"tanuki", [
        {dataset, "zeniba/shared"},
        {clone_base, "zeniba/akashita"},
        {paths, [
            "tanuki"
        ]}
    ]}
]}.
#+END_SRC
** Loose backend issues
*** TODO the monthly fuzzy schedule test fails on the 30th of the month
*** TODO schema custom types need some unit tests
**** especially the schedule validation code
*** TODO sometimes =test_db_threads_one_path()= test fails getting a lock
**** seemingly only on Ubuntu (maybe Debian, need to test)
*** TODO file restore in =main.rs= should schedule cleanup of the temporary file
**** supervisor could delete anything last modified an hour ago
*** TODO need to schedule pruning old database snapshots on remote store
**** there is no deduplication of the database files, so it uses more space
**** only really need the most recent copy
**** be mindful of remote storage deletion policies
** Loose GraphQL tasks
*** TODO test the GraphQL schema and resolvers
**** TODO "integers" that are not radix 10 integers
**** TODO digests that lack the proper algorithm prefix
**** TODO querying for things when there is nothing in the database
**** TODO querying snapshots
**** TODO querying trees
**** TODO querying files
**** DONE fetching configuration record
**** TODO updating configuration record
**** DONE querying datasets
**** DONE mutating datasets
**** DONE querying stores
**** DONE mutating stores
*** TODO probably should use a better client cache
**** c.f. =graphql_flutter= example that implements a =uuidFromObject()= function
**** uses the "type" of the object and its unique identifier as the caching key
**** our objects would need to have a "typename" for this to work
*** TODO find out how to document arguments to mutations
**** c.f. juniper API docs: Attribute Macro juniper::object
*** TODO handle errors in getting Database ref in graphql handler
** Loose WebUI tasks
*** TODO improve the navigation drawer
**** currently selected option should be highlighted, not actionable
*** TODO improve (server) error handling
**** when a temporary server error occurs, offer a "Retry" button
*** TODO improve snapshot tree browser
**** for larger number of entries, should use PaginatedDataTable
**** nice to have: sticky table header
**** nice to have: sort by file type
*** TODO consider how to hide the minio secret key using a show/hide button
*** TODO consider l10n
**** c.f. https://resocoder.com/2019/06/01/flutter-localization-the-easy-way-internationalization-with-json/
*** TODO dataset status says "running" even though it had an error
**** need to expose the error status via GraphQL
*** TODO improve the data sets form
**** TODO use the =validate()= function on =DataSet= to ensure validity
**** TODO should decode the computer ID to improve readability
**** TODO would be better to have frequency options in a row
***** need to use =FormBuilderCustomField= and return a =Row= of widgets
*** TODO should sort the datasets so they are always in the same order
**** maybe sort them by date, with most recent first
*** TODO tree entries of =ERROR= type should be displayed as such
**** error message from =TreeEntry.new()= could be stored as a new type of =TreeReference=
***** e.g. =TreeReference.ERROR(String)= where the string is the error message
*** TODO should have ui for listing all snapshots in a dataset
**** probably need paging in the ui and graphql api
**** consider presenting in a style similar to Time Machine
*** TODO improve the page for defining datasets
**** TODO store selection should be easier for the user
**** TODO disable Save button until form is valid
**** TODO store input validator should check stores actually exist
**** TODO pack size should have minimum and maximum values
*** TODO improve the page for defining stores
**** TODO disable Save button until form is valid
**** TODO delete button should be far away from the other button(s)
**** TODO delete button should require two clicks, with "are you sure?"
**** TODO display help text on stores page when there are no stores defined
**** TODO display help text on home page when there are no datasets defined
**** TODO scroll to form when edit button is clicked
***** with a bunch of stores on the screen, click ~Edit~ for last one
***** page refreshes and scrolls to the top
**** TODO autofocus input field on edit
***** this is tricky with React, =autofocus= is not really honored
***** can do it if we turn the input element into a full-fledged component
***** and use the =useRef()= hook to set the focus on the HTML element
***** c.f. https://reactjs.org/docs/hooks-reference.html#useref
*** TODO use breadcrumbs in the tree navigator to get back to parent directories
*** TODO consider and improve accessibility
**** enable testing for a11y sanity
**** add hints to improve the presentation of information
***** configuration panel
***** snapshot browser
** Multi-file Restore
*** backend
**** receive requests of tree/file digests to be restored
**** limit the number of digests that can be submitted in one request
**** return a request ID to the client for querying later
**** add the requests to a limited size queue to prevent abuse
**** process the requests in series on another thread (via actix)
**** need to ensure packs are downloaded only once
***** gets tricky with overlapping trees of many files
**** use application state to track progress of the requests
**** client requests status of restore using request ID
**** response includes the URL for retrieving the (zip) file
**** after file is downloaded to the client, file is removed
**** requests can be canceled
**** restore procedure needs to check request status in case canceled
*** frontend
**** write a usecase for submitting the tree/file digests
**** write a usecase for checking the progress of the request
**** direct user to a "restore requests" page that shows progress
**** when the request is ready, replace cancel button with download button
*** desktop
**** would not only download the zip file but also unzip the contents
** Manual Backup controls
*** add a "backup now" button to datasets listing
**** need a GraphQL mutation to signal backup to start
**** add a =start_dataset_now()= in =supervisor= module, similar to =start_due_datasets()=
***** that is, enqueue =StartBackup= on the =Runner= actor
*** similiarly have a "stop backup" button if it is running
**** need a GraphQL mutation to signal backup to stop
**** add a =StopBackup= action in =state= module
**** the =StopBackup= action sets =stop_requested= in =BackupState=
**** then =handle_file()= in =engine= module calls =get_state()= and checks for =stop_requested=
**** =handle_file()= will return an error if =stop_requested= is true
** More Functionality
*** TODO Perform a full backup on demand, discard all previous backups
**** Wifey doesn't like the idea of accumulating old stuff
**** Gives the user a chance to save space by removing old content
*** TODO event dispatching for the web and desktop
**** use the state management to manage "events" and state
**** engine emits actions/events to the store
***** for backup and restore functions
***** e.g. "downloaded a pack", "uploaded a pack"
**** store holds the cumulative data so late attachers can gather everything
**** supervisor threads register as subscribers to the store
**** clients will use GraphQL subscriptions to receive updates
**** supervisor threads emit GraphQL subscription events
*** TODO consider how datasets can be modified after creation
**** should their stores be allowed to change?
**** should their basepath be allowed to change?
**** cannot change stores assigned to dataset once there are snapshots
*** TODO consider how to restore symbolic links
**** i.e. no file chooser to download anything
**** what if the same path is now a file/directory?
*** TODO Secure FTP improvements
**** TODO support SFTP with private key authentication
***** use store form to take paths for public and private keys
**** TODO allow private key that is locked with a passphrase
***** passphrase for private key would be provided by envar
** More Information
*** TODO Show details about snapshots and files
**** show differences between two snapshots
**** show pack/chunk metrics for   all   files in a snapshot
**** show pack/chunk metrics for changed files in a snapshot
*** TODO Query to see histogram of file sizes, number of chunks, etc
**** for a given snapshot...
**** count number of files with N chunks for all values of N
*** TODO Show number of packs stored in a pack store
**** would have to keep track in the database
** Architecture Review
*** Database migrations
**** Use the =serde= crate features (c.f. https://serde.rs)
**** Use =#[serde(default)]= on struct to fill in blanks for new fields
**** Add =#[serde(skip_serializing)]= to a deprecated struct field
**** New fields will need accessors that convert from old fields as needed
***** reset the old field to indicate it is no longer relevant
**** Removing a field is no problem for serde
*** Embedded Database
**** Is the default RocksDB performance sufficient?
**** Consider https://github.com/spacejam/sled/
***** written in Rust, open source
***** will need prefix key scanning
****** looks like you just use a prefix of the key (sorts before the matching keys)
*** Client/Server
**** Look at ways to secure the server, to allay fears of exploits
**** A web conferencing tool was exploited via its hidden HTTP server
** Desktop application
*** clipboard support
**** look for clipboard plugin for flutter (for macOS)
**** c.f. https://flutter.dev/docs/development/packages-and-plugins/developing-packages
** macOS support
*** TODO Use =launchd= to manage the process, have it start automatically
*** TODO Use this to replace Time Machine (store on server using minio)
** Full Restore
*** TODO Restore file attributes from tree entry
**** TODO File mode
**** TODO File user/group
**** TODO File extended attributes
*** TODO Restore directories from snapshot
**** TODO Directory mode
**** TODO Directory user/group
**** TODO Directory extended attributes
**** TODO Restore multiple files efficiently
**** TODO Restore a directory tree efficiently
*** TODO Detect and prune stale snapshots that never completely uploaded
**** Stale snapshots exist in the database but are not referenced elsewhere
*** TODO Support snapshots consisting only of mode/owner changes
**** i.e. no file content changes, just the database records
*** TODO Restore the backup database
**** TODO Restore to a different directory, then copy over records
** Windows support
*** TODO Support Windows file types
**** ReadOnly
**** Hidden
**** System
** More Better
*** TODO document how the user might change the passphrase over time
**** user must remember their old passwords in order to decrypt old pack files
**** the application will never store the actual password anywhere
*** TODO support database integrity checks
**** ensure all referenced records actually exist
**** like git fsck, start at the top and traverse everything
**** find and report dangling objects
**** an automated scan could be run on occasion
*** TODO Automatically prune backups more then N days old
**** For Google and Amazon, anything older than 90 days is free to remove
**** This would be a configuration setting, with defaults and path-specific
*** TODO Option to keep N daily, M weekly, and P monthly backups (a la Attic backup)
*** TODO Permit scheduling upload hours for each day of the week
**** e.g. from 11pm to 6am Mon-Fri, none on Sat/Sun
*** TODO Command-line option to dump database to json (separate by key prefix, e.g. ~chunk~)
*** TODO Ability to pause or cancel a backup
*** TODO Support deduplication across multiple computers
**** Place the chunks and packs in a seperate "database" for syncing
***** For RocksDB, use a column family if it helps with =GetUpdatesSince()=
**** RocksDB replication story as of 2019-02-20:
: Q: Does RocksDB support replication?
: A: No, RocksDB does not directly support replication. However, it offers
: some APIs that can be used as building blocks to support replication.
: For instance, GetUpdatesSince() allows developers to iterate though all
: updates since a specific point in time.
***** see =GetUpdatesSince()= and =PutLogData()= functions
**** User configures the host name of the ~peer~ installation
***** Use that to form the URL with which to =sync=
**** Share the chunks and packs documents with a ~peer~ installation
**** At the start of backup, sync with the ~peer~ to get latest chunks/packs
*** TODO Consider how to deal with partial uploads
**** e.g. Minio/S3 has a means of handling these
*** TODO Design garbage collection solution (see NOTES)
*** TODO Pack store should recommend pack sizes
**** e.g. Glacier recommends archives greater than 100mb
**** can only really make a recommendation, the user has to choose the right size
*** TODO Permit removing a store from a dataset
**** would encourage user to clean up the remote files
**** for local store, could remove the files immediately
**** must invalidate all of the snapshots effected by the missing store
*** TODO Permit moving from one store to another
**** would mean downloading the packs and uploading them to the new store
*** TODO Support Amazon S3
**** Minio seems to have no bucket limit (higher than 100)
**** Need to limit number of remote buckets to 100
**** Bucket limit: catch the error and handle by re-using another bucket
*** TODO Support Amazon Glacier
**** Need to limit number of remote buckets to 1000
**** Use S3 to store the database-to-archive mapping of each snapshot
**** Offer user option to use "expedited" retrievals so they go faster
*** TODO Support Amazon Cloud Drive
*** TODO Support Microsoft Azure blob storage
*** TODO Support Backblaze B2
*** TODO Support [[https://wiki.openstack.org/wiki/Swift][OpenStack Swift]]
*** TODO Support Wasabi
*** TODO Support Google Drive
*** TODO Support Google Cloud Coldline
*** TODO Support Dropbox
*** TODO Support Oracle Cloud Storage
*** TODO Support IBM Cloud Storage
*** TODO Support Rackspace Cloud Files
*** TODO Consider how to backup and restore FIFO, BLK, and CHR "files"
**** c.f. https://github.com/jborg/attic/blob/master/attic/archive.py
**** c.f. https://github.com/avz/node-mkfifo (for FIFO)
**** c.f. https://github.com/mafintosh/mknod (for BLK and CHR)
* Product
** TODO Evaluate other backup software
*** TODO Check out some on App Store
**** Backup Guru LE
**** ChronoSync Express
**** Backup
**** Remote Backup Magic
**** Sync - Backup and Restore
**** Backup for Dropbox
**** Freeze - for Amazon Glacier
*** Lot of "folder sync" apps out there
** TODO Define the target audience
*** Average home user, no technical expertise required
** TODO Need distinquishing features
*** What sets this application apart from the other polished products?
**** Cross-platform (e.g. macOS, Windows)
**** Linux server ready
** Windows Certified
*** CloudBerry(?) has bunches of certifications
*** is that really so meaningful? *I* never cared
** Name
*** Joseph suggests "Attic"
**** =atticapp.com= is taken
**** =attic.app= is for sale
**** Look for ~attic~ in different languages
**** Esperanto: ~mansardo~
***** also means something in Macedonian
**** Hawaiian: ~kaukau~
**** Latin: ~atticae~
* Technical Information
** JS Build Artifacts
*** ReasonML + Webpack => main.js
| State       |    Size |
|-------------+---------|
| development | 2761882 |
| production  |  536345 |
| gzipped     |  145785 |
** Exploring other languages
*** Compile to native for easy deployment
*** Compile to native for code obfuscation
*** Rust
**** Advantages
***** compile to native
***** expressive, safe type system
***** good dependency management
***** lots of useful tools (e.g. clippy)
**** Disadvantages
***** fewer libraries compared to Go
**** DONE GraphQL server
***** Make sure it can generate a schema.json
***** Should be able to parse schema definition (for docs)
***** https://github.com/graphql-rust/juniper (BSD)
****** supports entire GraphQL specification
****** does /not/ read GraphQL schema language
****** supports GraphiQL and Playground
****** is not the HTTP server, but integrates with them
****** uses macros for schema documentation
***** tutorial at [[http://alex.amiran.it/post/2018-08-16-rust-graphql-webserver-with-warp-juniper-and-mongodb.html][alex.amiran.it]] that uses warp web framework
***** old https://github.com/nrc/graphql (MIT/Apache)
**** DONE Web framework
***** our needs are simple, so a simple framework is best
***** Actix https://actix.rs (Apache 2.0)
****** works with stable Rust
****** powerful and easy to use
****** testing library
****** integrates with juniper
****** offers state management for web code
****** lot more actively used than warp
***** warp https://github.com/seanmonstar/warp (MIT)
****** works with stable Rust
****** powerful and easy to use
****** testing library
****** integrates with juniper
***** Rocket https://rocket.rs (Apache 2.0)
****** requires Rust nightly because of fancy macros
****** routing using macros
****** streams input and output
****** cookies
****** json
****** environment configuration
****** testing library
****** integrates with juniper
***** Gotham https://gotham.rs (MIT/Apache 2.0)
****** targets stable Rust
****** routing
****** middleware
****** sessions
****** cookies
****** templates
****** testing library
****** how to integrate with juniper is unknown
***** Iron http://ironframework.io (MIT)
****** crate has not been updated since 2017
****** everything is middleware that must be added in
****** integrates with juniper
***** Nickel http://nickel-org.github.io (Express.js like) (MIT)
****** pretty basic compared to Rocket
***** tower-web https://github.com/carllerche/tower-web (MIT)
****** competing with warp? hyper?
**** DONE Database
***** ideally want something well maintained, reliable
***** schema is pretty simple, could use key/value store
***** RocksDB https://github.com/rust-rocksdb/rust-rocksdb (Apache)
****** statically links everything, including compression support
***** SQLite https://github.com/jgallagher/rusqlite (MIT)
***** Rust wrapper to LevelDB https://github.com/skade/leveldb
***** LevelDB in Rust (active?) https://bitbucket.org/dermesser/leveldb-rs/overview
**** DONE dotenv
***** https://github.com/dotenv-rs/dotenv (MIT)
**** DONE Configuration
***** https://github.com/mehcode/config-rs (MIT/Apache)
**** DONE =getpwuid= and =getgrgid= support
***** libc: https://crates.io/crates/libc (MIT/Apache 2.0)
**** DONE test library
***** https://github.com/rust-rspec/rspec (MPL-2.0)
****** appears to be dead
***** https://github.com/utkarshkukreti/speculate.rs (MIT)
****** works well for integration tests
**** DONE UUID support
***** https://github.com/uuid-rs/uuid (MIT/Apache 2.0)
**** DONE xattr support
***** Unix only: https://github.com/Stebalien/xattr (MIT/Apache 2.0)
**** DONE CDC
***** https://github.com/jrobhoward/quickcdc (MIT/Apache 2.0)
****** not quite FastCDC, given dates of paper, but should be close enough
****** use a constant salt value for predictable results
****** example uses =memmap= crate to read large files
**** DONE Tar file
***** https://github.com/alexcrichton/tar-rs (MIT/Apache 2.0)
**** DONE PGP/Encryption
***** https://github.com/gpg-rs/gpgme (LGPL)
****** will need to bundle the =gpgme= library (unless statically linked)
***** cryptostream https://github.com/neosmart/cryptostream (MIT)
***** basic packets [[https://github.com/csssuf/pretty-good][csssuf/pretty-good]]
***** read only [[https://nest.pijul.com/pmeunier/openpgp][pijul]] openpgp
**** DONE ULID
***** https://crates.io/crates/rusty_ulid (MIT)
**** DONE SFTP client
***** https://github.com/alexcrichton/ssh2-rs (MIT/Apache 2.0)
**** DONE AWS client
***** Rusoto https://www.rusoto.org (MIT)
**** DONE Google Cloud client
***** https://github.com/Byron/google-apis-rs (MIT/Apache 2.0)
**** DONE Minio client
***** Rusoto supports Minio https://github.com/rusoto/rusoto (MIT)
*** Go vs Rust
**** Go: first class support for cloud services
**** Go: statically linked OpenPGP readily available
**** Go: easy to read and write language
**** Rust: mature dependency management tooling
**** Rust: cargo has good editor support
**** Rust: expressive type system
**** Rust: nominal subtyping is much easier to follow
**** Rust: streamlined error handling
**** Rust: fine-grained namespaces and visibility control
