* Zorigami
** Exploring other languages
*** Compile to native for easy deployment
*** Compile to native for code obfuscation
*** [[https://github.com/revery-ui/revery][Revery]] for desktop interface
*** Rust
**** Advantages
***** compile to native
***** expressive, safe type system
***** good dependency management
***** lots of useful tools (e.g. clippy)
**** Disadvantages
***** fewer libraries compared to Go
**** DONE GraphQL server
***** Make sure it can generate a schema.json
***** Should be able to parse schema definition (for docs)
***** https://github.com/graphql-rust/juniper (BSD)
****** supports entire GraphQL specification
****** does /not/ read GraphQL schema language
****** supports GraphiQL and Playground
****** is not the HTTP server, but integrates with them
****** uses macros for schema documentation
***** tutorial at [[http://alex.amiran.it/post/2018-08-16-rust-graphql-webserver-with-warp-juniper-and-mongodb.html][alex.amiran.it]] that uses warp web framework
***** old https://github.com/nrc/graphql (MIT/Apache)
**** DONE Web framework
***** our needs are simple, so a simple framework is best
***** warp https://github.com/seanmonstar/warp (MIT)
****** works with stable Rust
****** powerful and easy to use
****** testing library
****** integrates with juniper
***** Rocket https://rocket.rs (Apache 2.0)
****** requires Rust nightly because of fancy macros
****** routing using macros
****** streams input and output
****** cookies
****** json
****** environment configuration
****** testing library
****** integrates with juniper
***** Gotham https://gotham.rs (MIT/Apache 2.0)
****** targets stable Rust
****** routing
****** middleware
****** sessions
****** cookies
****** templates
****** testing library
****** how to integrate with juniper is unknown
***** Iron http://ironframework.io (MIT)
****** crate has not been updated since 2017
****** everything is middleware that must be added in
****** integrates with juniper
***** Nickel http://nickel-org.github.io (Express.js like) (MIT)
****** pretty basic compared to Rocket
***** Actix https://actix.rs (Apache 2.0)
***** pretty basic https://github.com/carllerche/tower-web (MIT)
****** competing with warp? hyper?
**** DONE Database
***** ideally want something well maintained, reliable
***** schema is pretty simple, could use key/value store
***** RocksDB https://github.com/rust-rocksdb/rust-rocksdb (Apache)
****** statically links everything, including compression support
***** SQLite https://github.com/jgallagher/rusqlite (MIT)
***** Rust wrapper to LevelDB https://github.com/skade/leveldb
***** LevelDB in Rust (active?) https://bitbucket.org/dermesser/leveldb-rs/overview
**** DONE dotenv
***** the canonical crate repo has been emptied, there are many forks of the old code
***** most-up-to-date https://github.com/apiraino/rust-dotenv (MIT)
**** DONE Configuration
***** https://github.com/mehcode/config-rs (MIT/Apache)
**** DONE =getpwuid= and =getgrgid= support
***** libc: https://crates.io/crates/libc (MIT/Apache 2.0)
**** DONE test library: for now just use Rust built-in testing
**** DONE UUID support
***** https://github.com/uuid-rs/uuid (MIT/Apache 2.0)
**** DONE xattr support
***** Unix only: https://github.com/Stebalien/xattr (MIT/Apache 2.0)
**** DONE CDC
***** https://github.com/jrobhoward/quickcdc (MIT/Apache 2.0)
****** not quite FastCDC, given dates of paper, but should be close enough
****** use a constant salt value for predictable results
****** example uses =memmap= crate to read large files
**** DONE Tar file
***** https://github.com/alexcrichton/tar-rs (MIT/Apache 2.0)
**** DONE PGP/Encryption
***** https://github.com/gpg-rs/gpgme (LGPL)
****** will need to bundle the =gpgme= library (unless statically linked)
***** cryptostream https://github.com/neosmart/cryptostream (MIT)
***** basic packets [[https://github.com/csssuf/pretty-good][csssuf/pretty-good]]
***** read only [[https://nest.pijul.com/pmeunier/openpgp][pijul]] openpgp
**** DONE ULID
***** https://github.com/dylanhart/ulid-rs (MIT)
**** DONE SFTP client
***** https://github.com/alexcrichton/ssh2-rs (MIT/Apache 2.0)
**** DONE AWS client
***** Rusoto https://www.rusoto.org (MIT)
**** DONE Google Cloud client
***** https://github.com/Byron/google-apis-rs (MIT/Apache 2.0)
**** DONE Minio client
***** Rusoto supports Minio https://github.com/rusoto/rusoto (MIT)
*** Go
**** Advantages
***** compiles to a single native binary
***** better resource utilization than Node
***** stdlib has a lot of functionality
***** first-class support with cloud services
**** Disadvantages
***** Primitive type system
***** Verbose error handling
***** Dependency management story is still developing
***** New module support is not well supported in editors yet
**** DONE GraphQL server
***** TODO Make sure it can generate a schema.json
***** TODO Should be able to parse schema definition (for docs)
***** [[https://github.com/99designs/gqlgen][gqlgen]] (MIT)
****** supports everything and is type-safe
****** docs: https://gqlgen.com/getting-started/
****** c.f. https://hackernoon.com/graphql-with-golang-6e8da2054c25
***** [[https://github.com/graph-gophers/graphql-go][graph-gophers/graphql-go]] (BSD)
****** schema-first
***** [[https://github.com/graphql-go/graphql][graphql-go/graphql]] (MIT)
****** code-defined schema
**** DONE Web framework
***** [[https://revel.github.io][revel]] looks pretty good
***** [[https://echo.labstack.com][echo]] minimalist
***** [[https://iris-go.com][iris]] looks easy to use
**** DONE Database
***** [[https://github.com/dgraph-io/badger][dgraph-io/badger]] (Apache 2.0) seems very reliable
****** DONE read https://blog.dgraph.io/post/badger/
***** [[http://ledisdb.com][LedisDB]] supports LevelDB, has HTTP and CLI
***** [[https://github.com/syndtr/goleveldb][goleveldb]] is "LevelDB" written in Go
***** https://github.com/HouzuoGuo/tiedot (BSD)
**** DONE dotenv
***** https://github.com/joho/godotenv (MIT)
**** DONE Configuration
***** https://github.com/spf13/viper (MIT)
***** https://github.com/micro/go-config (Apache 2.0)
**** DONE =getpwuid= and =getgrgid= support
***** stdlib =import "os/user"=
**** DONE test library
***** mocha style BDD: https://github.com/franela/goblin (MIT)
****** uses [[https://github.com/onsi/gomega][gomega]] for BDD-style assertions
***** simple assertions: https://labix.org/gocheck (BSD)
**** DONE UUID support
***** https://github.com/satori/go.uuid (MIT)
**** DONE xattr support
***** https://github.com/pkg/xattr (BSD); no Windows support
**** DONE CDC
***** [[https://github.com/restic/chunker][restic/chunker]] (BSD)
***** consider implementing FastCDC in Go
***** Maybe convert JS https://github.com/ronomon/deduplication to Go
***** Maybe convert Rust https://github.com/jrobhoward/quickcdc to Go
***** no golang FastCDC implementations
**** DONE Tar file
***** stdlib: https://golang.org/pkg/archive/tar/
**** DONE PGP/Encryption
***** x/stdlib https://godoc.org/golang.org/x/crypto/openpgp
***** use =Encrypt= to encrypt and =ReadMessage= to decrypt
***** e.g. https://gist.github.com/stuart-warren/93750a142d3de4e8fdd2
**** DONE ULID: https://github.com/oklog/ulid (Apache 2.0)
**** DONE SFTP client: https://github.com/pkg/sftp (BSD)
**** DONE AWS client: https://github.com/aws/aws-sdk-go
**** DONE Google Cloud client: https://github.com/googleapis/google-cloud-go
**** DONE Minio client: https://www.minio.io/downloads.html#download-sdk
*** Go vs Rust
**** Go: first class support for cloud services
**** Go: statically linked OpenPGP readily available
**** Go: easy to read and write language
**** Rust: mature dependency management tooling
**** Rust: cargo has good editor support
**** Rust: expressive type system
**** Rust: nominal subtyping is much easier to follow
**** Rust: streamlined error handling
**** Rust: fine-grained namespaces and visibility control
*** OCaml
**** DONE GraphQL server
***** https://github.com/andreas/ocaml-graphql-server (MIT)
**** DONE Web framework
***** https://github.com/rgrinberg/opium (MIT)
**** DONE Database
***** git-like kv store: https://github.com/mirage/irmin (ISC)
***** leveldb bindings: https://github.com/mfp/ocaml-leveldb (LGPL)
**** TODO Configuration
**** TODO =getpwuid= and =getgrgid= support
**** DONE test library
***** https://github.com/mirage/alcotest (ISC)
**** DONE UUID
***** https://github.com/dbuenzli/uuidm (ISC)
**** DONE ULID
***** TODO https://github.com/stripedpajamas/ocaml-ulid (MIT)
**** DONE xattr
***** https://github.com/dsheets/ocaml-osx-xattr (ISC)
**** TODO CDC: nothing, would have to write it
**** DONE tar
***** https://github.com/mirage/ocaml-tar (ISC)
**** TODO PGP
***** incomplete: https://github.com/cfcs/ocaml-openpgp
**** TODO SFTP
***** incomplete: https://github.com/avsm/ocaml-ssh
**** TODO AWS
**** TODO Google
**** TODO Minio
** Phase 4
*** TODO Rewrite everything in Rust
**** DONE Decide on a web framework: warp
**** DONE Look for useful tools and VS Code support
***** https://github.com/rust-lang/rustfmt
***** https://github.com/rust-lang/rust-clippy
***** https://github.com/kbknapp/cargo-outdated (MIT)
***** https://github.com/nabijaczleweli/cargo-update (MIT)
**** DONE Learn about Rust again, catch up on new things
***** DONE =static= holds a value, =const= is a compile-time constant
***** DONE futures for async stuff, https://rust-lang-nursery.github.io/futures-rs/
***** DONE with =main.rs= and =lib.rs= you get both a binary and library
***** DONE =format!= creates a string, =write!= writes to a buffer
***** DONE how does the =?= operator work? replaces =try!= macro
***** DONE How to have code run when a module starts up (a la Go's =init()=)
****** https://crates.io/crates/lazy_static/
**** TODO Learn how to manage application state
***** https://github.com/SergioBenitez/state (MIT/Apache)
***** https://github.com/rust-redux/rust-redux (MIT)
***** https://github.com/jaredonline/redux-rs (???)
**** DONE Consider translating FastCDC to Rust to get some practice
**** DONE Determine the code layout
***** DONE can Rust live alongside TypeScript for the time being? yes
***** web framework seems to have no say in the matter
***** put integration tests in =tests= as =modname.rs=
***** put helper test code in =tests/modname/mod.rs=
**** DONE write a core package with a few functions
***** DONE checksum data
***** DONE checksum file
***** DONE checksum string from bytes
***** DONE checksum bytes from string
**** TODO set up configuration for dev and testing
***** TODO replace hard-coded db_path in integration test
**** DONE set up web framework to serve a static page
***** DONE use Gotham https://gotham.rs (MIT/Apache 2.0)
***** DONE learn how to serve static assets
***** DONE switch from gotham.rs to warp (same developer as hyper.rs)
***** DONE serve up =index.html=
***** DONE serve static assets under =public=
**** DONE set up GraphQL server to serve a simple query
***** DONE add a simple hello query
***** DONE add some documentation (using doc comments)
***** c.f. https://graphql-rust.github.io/servers/warp.html
***** c.f. [[http://alex.amiran.it/post/2018-08-16-rust-graphql-webserver-with-warp-juniper-and-mongodb.html][Rust GraphQL with warp and juniper]] for extensive example
***** DONE integrate with web framework to expose API
***** DONE integrate with web framework to expose Playground
**** DONE get chunk checksums working
***** https://crates.io/crates/crypto-hash (MIT)
****** use the =digest()= helper to get the hash as bytes
**** DONE get pack files working using tar
**** DONE try to get the gpgme thing working
***** seems like =Context= is the main interface
***** =Context.encrypt()= can take =File= for both plain and cipher
***** DONE figure out the basic usae of the gpgme API
****** DONE use =ctx.with_passphrase_provider()= to avoid user interface
***** DONE figure out how to encrypt a file
****** the ~recipient~ can be an empty list
***** DONE can stop compressing the pack files since pgp does that
***** DONE somehow the encryption is not really working
****** file can be decrypted using =gpg= without a passphrase
****** seems like =gpg= caches the secret key somewhere
**** DONE Add crate license checker: https://github.com/Nemo157/cargo-lichking
**** TODO get basic database working
***** DONE read https://github.com/facebook/rocksdb/wiki/RocksDB-Basics
***** DONE write an "insert if missing" function
****** does not write if the key is already present
***** DONE decide how to store "documents" in the database
****** use [[https://github.com/serde-rs/serde][serde]] to efficiently de/serialize to many formats
****** can =skip= fields that do not need serde
****** can write custom serde functionality as needed
****** DONE how to manage versioning of the data structures?
******* can use =#[serde(default)]= and =Default= to fill in blanks
****** =serde_json= is maintained by serde community
****** [[https://github.com/pyfisch/cbor][pyfisch/cbor]]; CBOR is an internet standard (RFC 7049)
****** [[https://github.com/3Hren/msgpack-rust][3Hren/msgpack-rust]] is not actively developed
***** DONE Use serde ~rename~ feature to make short field names
***** TODO write functions for insert/get tree
***** TODO write functions for insert/get snapshot
***** TODO write functions for insert/get configuration
***** TODO write functions for insert/get xattr
***** TODO write functions for insert/get file
***** DONE write functions for insert/get chunk
***** TODO write functions for insert/get pack
***** DONE work out how to support the counts of each type of document
***** DONE decide how the chunk and pack records will be stored to facilitate multi-host dedupe
**** DONE get CDC working
**** TODO implement pack stores
***** TODO local
***** TODO minio
***** TODO sftp
**** TODO consider approaches for managing the database instance
***** engine opens at start of backup procedure, drops when done
***** what about web server? does warp have state management?
***** maybe use =Arc= and =Mutex= to manage concurrent access
**** TODO convert engine code
***** TODO build tree objects
****** detect files and directories using =fs::metadata=
#+BEGIN_SRC rust
let metadata = fs::metadata(path)?;
if !metadata.file_type().is_file() {
...
#+END_SRC
***** TODO find differences between snapshots
***** TODO open database instance and pass =DB= around
***** TODO produce pack files from changes
***** TODO restore files from backup
**** TODO Update =README.md= wrt to Rust and requirements
**** TODO Add =gpgme= library dependency to =README.md=
***** =brew install gpgme=
**** TODO Update =NOTES.md= for several things
***** Rust vs TypeScript/JavaScript
***** RocksDB vs PouchDB
**** TODO Try building on Windows
**** TODO Remove everything in TODO and NOTES related to the old stack
***** PouchDB
***** TypeScript
***** Node.js
*** TODO Rewrite everything in Go if Rust doesn't work out
**** TODO Decide on a web framework
**** TODO Look for useful tools and VS Code support
**** TODO Determine the code layout (web framework probably dictates to some extent)
**** TODO use =go mod= for dependency management and project isolation
**** TODO write a core package with a few functions
**** TODO set up configuration for dev and testing
**** TODO write unit tests for core package
**** TODO get pack files working
**** TODO get encryption working with OpenPGP
**** TODO Add license checker: https://github.com/src-d/go-license-detector
**** TODO get basic database working
**** TODO get CDC working (probably translate ronomon's code)
**** TODO implement pack stores
***** TODO local
***** TODO minio
***** TODO sftp
**** TODO convert engine code
***** TODO build tree objects
***** TODO find differences between snapshots
***** TODO produce pack files from changes
***** TODO restore files from backup
**** TODO set up web framework
**** TODO set up GraphQL server
*** TODO Document the database schema
**** [[http://cbor.io][RocksDB]] key/value store
**** [[http://cbor.io][CBOR]] values
**** keys have type prefixes (e.g. =chunk/=)
**** values are name/value pairs of object properties
*** TODO Write a ReasonML frontend
**** TODO Add =bs-platform= dependency and =bsconfig.json= file
**** TODO Put front-end code in a directory named =web-src=
**** TODO Set up =gulp= and =webpack= to build the front-end code
**** TODO Set up apollo client dependency and schema tooling
**** TODO Set up the routing
**** TODO Write a simple home page that shows something
*** TODO Recover from unfinished backup procedure
**** When performing backup, check if latest snapshot exists and lacks an end time
**** If so, try to continue the backup with that snapshot
**** If not, make a new snapshot
**** If there are no changes at all (tree or file), delete the snapshot
*** TODO Manage datasets, defaults, saving updated snapshot to database
*** TODO Exclude the database files from the data set(s)
*** TODO Add something that will run scheduled jobs
**** that is, an easy way to trigger backups according to the configuration
** Phase 5
*** TODO Use this to replace =replicaz= by persisting to USB drive
*** TODO Use this to replace =replicaz= by persisting over SFTP
*** TODO Support multiple roots per dataset
*** TODO Verify checksum of downloaded packs during restore
*** TODO Store database in a bucket named after the "computer UUID"
*** TODO Store pack files in Google Cloud Storage
**** c.f. https://github.com/googleapis/nodejs-storage/
*** TODO Use this to replace =akashita= for online backups
** Phase 6
*** TODO Restore file attributes from tree entry
**** TODO File mode
**** TODO File user/group
**** TODO File extended attributes
*** TODO Restore directories from snapshot
**** TODO Directory mode
**** TODO Directory user/group
**** TODO Directory extended attributes
**** TODO Restore multiple files efficiently
**** TODO Restore a directory tree efficiently
*** TODO Detect file deletion during backup, mark file record as skipped
*** TODO Support snapshots consisting only of mode/owner changes
**** i.e. no file content changes, just the database records
*** TODO Restore the backup database
**** TODO Restore to a different directory, then copy over records
*** TODO Support deduplication across multiple computers
**** Place the chunks and packs in a seperate "database" for syncing
***** For RocksDB, use a column family if it helps with =GetUpdatesSince()=
**** RocksDB replication story as of 2019-02-20:
: Q: Does RocksDB support replication?
: A: No, RocksDB does not directly support replication. However, it offers
: some APIs that can be used as building blocks to support replication.
: For instance, GetUpdatesSince() allows developers to iterate though all
: updates since a specific point in time.
***** see =GetUpdatesSince()= and =PutLogData()= functions
**** Use the express support in [[https://github.com/pouchdb/pouchdb-server][pouchdb-server]] to serve up chunks/packs db
**** User configures the host name of the ~peer~ installation
***** Use that to form the URL with which to =sync=
**** Share the chunks and packs documents with a ~peer~ installation
**** At the start of backup, sync with the ~peer~ to get latest chunks/packs
*** TODO Automatically prune backups more then N days old
**** For Google and Amazon, anything older than 90 days is free to remove
**** This would be a configuration setting, with defaults and path-specific
*** TODO Option to keep N daily, M weekly, and P monthly backups (a la Attic backup)
*** TODO Command-line option to dump database to json (separate by key prefix, e.g. ~chunk~)
** Phase 7
*** TODO Consider how to deal with partial uploads (e.g. Minio/S3 has a means of handling these)
*** TODO Read cross platform Node.js guide: https://github.com/ehmicky/portable-node-guide
*** TODO Support Windows file types
**** ReadOnly
**** Hidden
**** System
*** TODO Support Amazon S3
*** TODO Support Amazon Glacier
**** Offer user option to use "expedited" retrievals so they go faster
*** TODO Support Microsoft Azure blob storage
*** TODO Support Backblaze B2
*** TODO Support [[https://wiki.openstack.org/wiki/Swift][OpenStack Swift]]
*** TODO Support Wasabi
*** TODO Support Google Drive
*** TODO Support Dropbox
*** TODO Support Oracle Cloud Storage
*** TODO Support IBM Cloud Storage
*** TODO Support Rackspace Cloud Files
*** TODO Consider how to backup and restore FIFO, BLK, and CHR "files"
**** c.f. https://github.com/jborg/attic/blob/master/attic/archive.py
**** c.f. https://github.com/avz/node-mkfifo (for FIFO)
**** c.f. https://github.com/mafintosh/mknod (for BLK and CHR)
* Desktop App
** TODO Read https://youngdynasty.net/posts/writing-mac-apps-in-go/
** Phase N: Revery?
*** https://github.com/revery-ui/revery
*** ReasonML
*** React-like UI
*** Redux-like state management
*** Compiles to native
*** Would not be using CSS, presumably
*** Does it have support for systray?
*** Does it have support for dock icons?
** Phase N: Electron
*** TODO Write it in TypeScript
*** TODO Consider using [[https://github.com/neon-bindings/neon][Neon bindings]] to write some parts in Rust
*** TODO Create a system tray icon/widget
**** Popup menu like Time Machine
**** Show current status, last backup
**** Action to open the app and examine snapshots
**** Action to open the app and check settings
* Product
** Name
*** Joseph suggests "Attic"
**** =atticapp.com= is taken
**** =attic.app= is for sale
**** Look for ~attic~ in different languages
**** Esperanto: ~mansardo~
***** also means something in Macedonian
**** Hawaiian: ~kaukau~
**** Latin: ~atticae~
