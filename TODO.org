* Zorigami
** Phase 2
*** DONE Decide how to handle files changing during lengthy backups
*** DONE Consider how to handle small changes to large files
**** e.g. using merkle tree of "bytes" to save only changed parts of large files
**** c.f. perkeep.org design/code for an example of dealing with large files
- uses Merkle tree of "bytes" schema blobs to represent large files
- data stored at the leaves of the tree
- rolling checksum cut points (ala rsync, bup)
- de-duplication within files and shifting files
- efficient seeks/pread
**** rsync, rolling checksum, splitting notes
***** https://github.com/perkeep/perkeep/blob/master/internal/rollsum/rollsum.go
***** https://github.com/apenwarr/bup/blob/master/lib/bup/bupsplit.c
*** DONE Look into the chunk deduplication approaches
**** DONE Design schema around storing files as chunks
***** small files are a single chunk
***** large files are split into chunks using CDC
**** DONE Change packing implementation to work with chunks
***** parts have SHA256 checksum versus SHA1
***** part checksums are known in advance, no need to calculate them
**** DONE Look into "content defined chunking" algorithms
**** DONE Look for "FastCDC" npm
**** DONE Look for "gear" based CDC as an alternative to FastCDC
**** FastCDC for node: https://github.com/ronomon/deduplication
***** finds chunk boundaries and returns sha256 of chunks
***** actively maintained
***** MIT licensed
**** https://github.com/datproject/rabin
***** does not have a license?
***** uses a very old fingerprinting algorithm
**** c.f. https://restic.net/blog/2015-09-12/restic-foundation1-cdc
*** DONE Add content-defined chunking functions
*** DONE Write function to assemble chunks back into original file
*** DONE Introduce logging and replace =console= calls with logger
*** DONE Introduce config library for configuring different environments
*** DONE Introduce pouchdb and code for reading/writing data
*** DONE Rewrite JavaScript code using TypeScript
**** c.f. https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html
**** DONE Read about using winston with TypeScript
***** it has the =index.d.ts= file, so it supports TypeScript
**** DONE Set up the =tsconfig.json=
***** DONE Source code lives in =src=
***** DONE Compiled code goes to =dist=
**** DONE Define a type to hold the master keys (Object doesn't type check)
**** DONE Set up the test framework: [[https://tutorialedge.net/typescript/testing-typescript-api-with-mocha-chai/][testing-typescript-api-with-mocha-chai]]
**** DONE Set up gulp to build the code
**** DONE Convert one =core= function at a time, writing tests for each
**** DONE Install type definitions for libraries, e.g. =npm i -D @types/jquery=
***** DONE chai
***** DONE fs-extra
***** DONE mocha
***** DONE node
***** DONE pouchdb
***** DONE tmp
***** DONE uuid
***** DONE config
**** DONE Remove the =NODE_PATH= setting
*** TODO Consider if =Chunk= should have its own module, and more functions
*** TODO Consider if =database= module should define a =Document= type
*** TODO Implement a "local disk" storage engine for testing
**** TODO Decide if pack files need more metadata redundancy
**** Can also be used for backing up to an attached disk
*** TODO Write the logic for the "engine"
**** DONE Store the ~encryption~ record in PouchDB
**** TODO Produce a ~working~ snapshot of the dataset
**** TODO Detect symbolic links and store their reference
- Use =fs.lstat()= and =stats.isSymbolicLink()= to detect symlinks
- Store the mode in the tree as =lrwxr-xr-x= (give or take some bits)
- Store the link value as the =checksum= in the tree (since there is no file)
**** TODO Compute the difference from the previous snapshot
**** TODO Produce and upload pack files containing new/changed files
***** TODO Fill a queue of N file objects to allow fitting chunks to packs
(but without having all files in memory at once, which could be many the first time)
***** TODO Split large files across packs
*** TODO Update the architecture and data model in =NOTES.md=
** Phase 3
*** TODO Use starter [[https://github.com/Microsoft/TypeScript-Node-Starter#typescript-node-starter][guide]] to get Node set up with TypeScript
***** TODO Look more at how https://github.com/TypeStrong/ts-node can be used
***** TODO Is rewriting =app.js= worthwhile or necessary?
***** TODO Translate the routes
*** TODO Maybe rewrite =gulpfile.ts= in TypeScript
***** c.f. https://github.com/TypeStrong/ts-node
***** https://github.com/vvakame/typescript-project-sample/blob/master/gulpfile.ts
*** TODO Introduce GraphQL backend and schema
**** TODO Define the schema
**** TODO Write a simple resolver
**** TODO Write a unit test
*** TODO Write a ReasonML frontend
**** TODO Add =bs-platform= dependency and =bsconfig.json= file
**** TODO Put front-end code in a directory named =web-src=
**** TODO Set up =gulp= and =webpack= to build the front-end code
**** TODO Set up the routing
**** TODO Write a simple home page that shows something
** Phase 4
*** TODO Implement SFTP protocol
**** https://github.com/jyu213/ssh2-sftp-client
*** TODO Use this to replace =replicaz= by persisting over SFTP
*** TODO Design the cloud interface code to be service agnostic
**** Same basic plugin design as the stores
*** TODO Store database in a bucket named after the "computer UUID"
*** TODO Store pack files in Google Cloud Storage
- https://github.com/googleapis/nodejs-storage/
** Phase 5
*** TODO Support snapshots consisting only of mode/owner changes
**** i.e. no file content changes, just the database records
*** TODO Store pack files in Amazon Glacier
**** c.f. https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/welcome.html
**** Offer user option to use "expedited" retrievals so they go faster

*** TODO Automatically prune backups more then N months old
**** For Google and Amazon, anything older than 90 days is free to remove
**** This would be a configuration setting, with defaults and path-specific
* Electron App
** Phase N
*** Create a system tray icon/widget
**** Popup menu like Time Machine
**** Show current status, last backup
**** Action to open the app and examine snapshots
**** Action to open the app and check settings
