* Zorigami
** Exploring other languages
*** Compile to native for easy deployment
*** [[https://github.com/revery-ui/revery][Revery]] for desktop interface
*** OCaml
**** Advantages
***** Compile to native
***** Expressive type system
**** Disadvantages
***** Dearth of libraries for many things
**** Configuration
**** =getpwuid= and =getgrgid= support
**** GraphQL server
***** https://github.com/andreas/ocaml-graphql-server (MIT)
**** test library
**** build tool
**** UUID support
***** type 3, 4, 5: https://github.com/dbuenzli/uuidm (ISC)
**** xattr support
**** CDC
**** Web framework
**** Tar file
**** Database
**** PGP
**** Crypto
**** ULID
**** SFTP client
**** AWS client
**** Google Cloud client
**** Minio client
*** Go
**** Advantages
***** compiles to a single native binary
***** better resource utilization than Node
***** stdlib has a lot of functionality
**** dotenv
***** https://github.com/joho/godotenv (MIT)
**** Configuration
***** https://github.com/spf13/viper (MIT)
***** https://github.com/micro/go-config (Apache 2.0)
**** =getpwuid= and =getgrgid= support
***** stdlib =import "os/user"=
**** test library
***** mocha style BDD: https://github.com/franela/goblin (MIT)
****** uses [[https://github.com/onsi/gomega][gomega]] for BDD-style assertions
***** simple assertions: https://labix.org/gocheck (BSD)
**** build tool (e.g. gulp, webpack)
**** UUID support
***** https://github.com/satori/go.uuid (MIT)
**** xattr support
***** https://github.com/pkg/xattr (BSD); no Windows support
**** GraphQL server
***** TODO Make sure it can generate a schema.json
***** TODO Should be able to parse schema definition (for docs)
***** [[https://github.com/99designs/gqlgen][gqlgen]] (MIT)
****** supports everything and is type-safe
****** docs: https://gqlgen.com/getting-started/
****** c.f. https://hackernoon.com/graphql-with-golang-6e8da2054c25
***** [[https://github.com/graph-gophers/graphql-go][graph-gophers/graphql-go]] (BSD)
****** schema-first
***** [[https://github.com/graphql-go/graphql][graphql-go/graphql]] (MIT)
****** code-defined schema
**** CDC
***** [[https://github.com/restic/chunker][restic/chunker]] (BSD)
***** consider implementing FastCDC in Go
***** Maybe convert JS https://github.com/ronomon/deduplication to Go
***** Maybe convert Rust https://github.com/jrobhoward/quickcdc to Go
***** no golang FastCDC implementations
**** Web framework
***** [[https://revel.github.io][revel]] looks pretty good
***** [[https://echo.labstack.com][echo]] minimalist
***** [[https://iris-go.com][iris]] looks easy to use
**** Tar file
***** stdlib: https://golang.org/pkg/archive/tar/
**** Database
***** ideally want something well maintained, reliable (e.g. LevelDB)
***** schema is pretty simple, could use key/value store
***** TODO look for a robust K/V store
***** [[https://github.com/dgraph-io/badger][dgraph-io/badger]] (Apache 2.0) seems very reliable
****** TODO read https://blog.dgraph.io/post/badger/
***** [[http://ledisdb.com][LedisDB]] supports LevelDB, has HTTP and CLI
***** [[https://github.com/syndtr/goleveldb][goleveldb]] is "LevelDB" written in Go
***** maybe SQLite would work
***** https://github.com/HouzuoGuo/tiedot (BSD)
**** PGP
***** x/stdlib https://godoc.org/golang.org/x/crypto/openpgp
***** use =Encrypt= to encrypt and =ReadMessage= to decrypt
***** e.g. https://gist.github.com/stuart-warren/93750a142d3de4e8fdd2
**** Crypto
***** public key: stdlib https://golang.org/pkg/crypto/rsa/
***** random: stdlib https://golang.org/pkg/crypto/rand/
***** digest: stdlib https://golang.org/pkg/crypto/sha256/
***** HMAC: stdlib https://golang.org/pkg/crypto/hmac/
***** bcrypt: https://godoc.org/golang.org/x/crypto/bcrypt
***** scrypt: https://godoc.org/golang.org/x/crypto/scrypt
***** stream cipher: https://golang.org/pkg/crypto/cipher/ (=NewCTR=)
**** ULID: https://github.com/oklog/ulid (Apache 2.0)
**** SFTP client: https://github.com/pkg/sftp (BSD)
**** AWS client: https://github.com/aws/aws-sdk-go
**** Google Cloud client: https://github.com/googleapis/google-cloud-go
**** Minio client: https://www.minio.io/downloads.html#download-sdk
** Phase 3
*** DONE Use starter [[https://github.com/Microsoft/TypeScript-Node-Starter][guide]] to get Node set up with TypeScript
**** DONE Look more at how https://github.com/TypeStrong/ts-node can be used
**** DONE Translate =bin/www= to =src/server.ts=
**** DONE Translate =app.js= to =src/app.ts=
**** DONE Add build/clean/watch steps to =gulpfile.js=
**** DONE Update =package.json= to invoke compiled server
**** DONE Translate the routes
*** DONE Look for code coverage tools that work well with Mocha
*** DONE Introduce GraphQL backend and schema
**** DONE Add apollo server dependency
**** DONE Add a route for graphql
**** DONE Get the GraphQL playground working
**** DONE Try to get =graphql.ts= to be a proper TypeScript module
**** DONE Read https://www.apollographql.com/docs/apollo-server/
**** DONE Define the schema
**** DONE Write a simple resolver
**** DONE Write a unit test
*** DONE Use a standard format for pack files (e.g. tar)
**** Using open standards satisfies long term support
**** Standard file archive format: tar
***** entry names are the =<algo>-<checksum>= values
***** https://github.com/archiverjs/node-archiver (can do streams)
**** Standard encryption format: PGP
***** c.f. RFC 4880 for OpenPGP definition
***** uses public key to encrypt session keys, session keys encrypt data
***** option to compress data
***** supports message authentication
***** keys are stored in database
***** user password is the private key passphrase
***** https://github.com/openpgpjs/openpgpjs (LGPL)
***** DONE Get encryption and decryption with generated keys working
***** DONE Generate keys once and store in database, load on demand
***** DONE Evaluate which core functions are now redundant
****** encrypt/decrypt file
****** compress/decompress file
** Phase 4
*** TODO Rewrite everything in Go
**** DONE go through tour of go
**** DONE look for equivalent of "virtual environments"
**** DONE brush up on weak aspects of go
**** TODO set up project and build environment
***** /not/ going to use vgo/mod at this time, much too unstable in 1.11
***** TODO Use https://github.com/GetStream/vg to set up virtual environments
***** TODO Use https://github.com/golang/dep to manage dependencies
**** TODO write a core package with a few functions
**** TODO set up configuration for dev and testing
**** TODO write unit tests for core package
**** TODO get pack files working
**** TODO get encryption working
**** TODO get basic database working
**** TODO get CDC working
**** TODO implement pack stores
***** TODO local
***** TODO minio
***** TODO sftp
**** TODO convert engine code
***** TODO build tree objects
***** TODO find differences between snapshots
***** TODO produce pack files from changes
***** TODO restore files from backup
**** TODO set up web framework
**** TODO set up GraphQL server
*** TODO Write a ReasonML frontend
**** TODO Add =bs-platform= dependency and =bsconfig.json= file
**** TODO Put front-end code in a directory named =web-src=
**** TODO Set up =gulp= and =webpack= to build the front-end code
**** TODO Set up apollo client dependency and schema tooling
**** TODO Set up the routing
**** TODO Write a simple home page that shows something
*** TODO Recover from unfinished backup procedure
**** When performing backup, check if latest snapshot exists and lacks an end time
**** If so, try to continue the backup with that snapshot
**** If not, make a new snapshot
**** If there are no changes at all (tree or file), delete the snapshot
*** TODO Manage datasets, defaults, saving updated snapshot to database
*** TODO Exclude the database files from the data set(s)
*** TODO Add something that will run scheduled jobs
**** that is, an easy way to trigger backups according to the configuration
** Phase 5
*** TODO Use this to replace =replicaz= by persisting to USB drive
*** TODO Use this to replace =replicaz= by persisting over SFTP
*** TODO Support multiple roots per dataset
*** TODO Verify checksum of downloaded packs during restore
*** TODO Store database in a bucket named after the "computer UUID"
*** TODO Store pack files in Google Cloud Storage
**** c.f. https://github.com/googleapis/nodejs-storage/
*** TODO Use this to replace =akashita= for online backups
** Phase 6
*** TODO Restore file attributes from tree entry
**** TODO File mode
**** TODO File user/group
**** TODO File extended attributes
*** TODO Restore directories from snapshot
**** TODO Directory mode
**** TODO Directory user/group
**** TODO Directory extended attributes
**** TODO Restore multiple files efficiently
**** TODO Restore a directory tree efficiently
*** TODO Detect file deletion during backup, mark file record as skipped
*** TODO Support snapshots consisting only of mode/owner changes
**** i.e. no file content changes, just the database records
*** TODO Restore the backup database
**** TODO Restore to a different directory, then copy over records
*** TODO Support deduplication across multiple computers
**** Place the chunks and packs in a seperate "database" for syncing
**** Use the express support in [[https://github.com/pouchdb/pouchdb-server][pouchdb-server]] to serve up chunks/packs db
**** User configures the host name of the ~peer~ installation
***** Use that to form the URL with which to =sync=
**** Share the chunks and packs documents with a ~peer~ installation
**** At the start of backup, sync with the ~peer~ to get latest chunks/packs
*** TODO Automatically prune backups more then N days old
**** For Google and Amazon, anything older than 90 days is free to remove
**** This would be a configuration setting, with defaults and path-specific
*** TODO Option to keep N daily, M weekly, and P monthly backups (a la Attic backup)
** Phase 7
*** TODO Consider how to deal with partial uploads (e.g. Minio/S3 has a means of handling these)
*** TODO Read cross platform Node.js guide: https://github.com/ehmicky/portable-node-guide
*** TODO Support Windows file types
**** ReadOnly
**** Hidden
**** System
*** TODO Support Amazon S3
*** TODO Support Amazon Glacier
**** Offer user option to use "expedited" retrievals so they go faster
*** TODO Support Microsoft Azure blob storage
*** TODO Support Backblaze B2
*** TODO Support [[https://wiki.openstack.org/wiki/Swift][OpenStack Swift]]
*** TODO Support Wasabi
*** TODO Support Google Drive
*** TODO Support Dropbox
*** TODO Support Oracle Cloud Storage
*** TODO Support IBM Cloud Storage
*** TODO Support Rackspace Cloud Files
*** TODO Consider how to backup and restore FIFO, BLK, and CHR "files"
**** c.f. https://github.com/jborg/attic/blob/master/attic/archive.py
**** c.f. https://github.com/avz/node-mkfifo (for FIFO)
**** c.f. https://github.com/mafintosh/mknod (for BLK and CHR)
* Desktop App
** TODO Read https://youngdynasty.net/posts/writing-mac-apps-in-go/
** Phase N: Revery?
*** https://github.com/revery-ui/revery
*** ReasonML
*** React-like UI
*** Redux-like state management
*** Compiles to native
*** Would not be using CSS, presumably
*** Does it have support for systray?
*** Does it have support for dock icons?
** Phase N: Electron
*** TODO Write it in TypeScript
*** TODO Create a system tray icon/widget
**** Popup menu like Time Machine
**** Show current status, last backup
**** Action to open the app and examine snapshots
**** Action to open the app and check settings
* Product
** Name
*** Joseph suggests "Attic"
**** =atticapp.com= is taken
**** =attic.app= is for sale
**** Look for ~attic~ in different languages
**** Esperanto: ~mansardo~
***** also means something in Macedonian
**** Hawaiian: ~kaukau~
**** Latin: ~atticae~
