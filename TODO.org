* Zorigami
** Phase 3
*** DONE Use starter [[https://github.com/Microsoft/TypeScript-Node-Starter][guide]] to get Node set up with TypeScript
**** DONE Look more at how https://github.com/TypeStrong/ts-node can be used
**** DONE Translate =bin/www= to =src/server.ts=
**** DONE Translate =app.js= to =src/app.ts=
**** DONE Add build/clean/watch steps to =gulpfile.js=
**** DONE Update =package.json= to invoke compiled server
**** DONE Translate the routes
*** DONE Look for code coverage tools that work well with Mocha
*** DONE Introduce GraphQL backend and schema
**** DONE Add apollo server dependency
**** DONE Add a route for graphql
**** DONE Get the GraphQL playground working
**** DONE Try to get =graphql.ts= to be a proper TypeScript module
**** DONE Read https://www.apollographql.com/docs/apollo-server/
**** DONE Define the schema
**** DONE Write a simple resolver
**** DONE Write a unit test
*** TODO Use a standard format for pack files (e.g. tar)
**** Using open standards satisfies long term support
**** Standard file archive format: tar
***** entry names are the =<algo>-<checksum>= values
***** https://github.com/archiverjs/node-archiver (can do streams)
**** Standard encryption format: PGP
***** c.f. RFC 4880 for OpenPGP definition
***** uses public key to encrypt session keys, session keys encrypt data
***** option to compress data
***** supports message authentication
***** keys are stored in database
***** user password is the private key passphrase
***** JavaScript LGPL: https://github.com/openpgpjs/openpgpjs
***** JavaScript BSD-3: https://github.com/keybase/kbpgp/
*** TODO Write a ReasonML frontend
**** TODO Add =bs-platform= dependency and =bsconfig.json= file
**** TODO Put front-end code in a directory named =web-src=
**** TODO Set up =gulp= and =webpack= to build the front-end code
**** TODO Set up apollo client dependency and schema tooling
**** TODO Set up the routing
**** TODO Write a simple home page that shows something
*** TODO Recover from unfinished backup procedure
**** When performing backup, check if latest snapshot exists and lacks an end time
**** If so, try to continue the backup with that snapshot
**** If not, make a new snapshot
**** If there are no changes at all (tree or file), delete the snapshot
*** TODO Manage datasets, defaults, saving updated snapshot to database
*** TODO Exclude the database files from the data set(s)
*** TODO Add something that will run scheduled jobs
**** that is, an easy way to trigger backups according to the configuration
** Phase 4
*** TODO Use this to replace =replicaz= by persisting to USB drive
*** TODO Use this to replace =replicaz= by persisting over SFTP
*** TODO Support multiple roots per dataset
*** TODO Verify checksum of downloaded packs during restore
*** TODO Store database in a bucket named after the "computer UUID"
*** TODO Store pack files in Google Cloud Storage
**** c.f. https://github.com/googleapis/nodejs-storage/
*** TODO Use this to replace =akashita= for online backups
** Phase 5
*** TODO Restore file attributes from tree entry
**** TODO File mode
**** TODO File user/group
**** TODO File extended attributes
*** TODO Restore directories from snapshot
**** TODO Directory mode
**** TODO Directory user/group
**** TODO Directory extended attributes
**** TODO Restore multiple files efficiently
**** TODO Restore a directory tree efficiently
*** TODO Detect file deletion during backup, mark file record as skipped
*** TODO Support snapshots consisting only of mode/owner changes
**** i.e. no file content changes, just the database records
*** TODO Restore the backup database
**** TODO Restore to a different directory, then copy over records
*** TODO Support deduplication across multiple computers
**** Place the chunks and packs in a seperate "database" for syncing
**** Use the express support in [[https://github.com/pouchdb/pouchdb-server][pouchdb-server]] to serve up chunks/packs db
**** User configures the host name of the ~peer~ installation
***** Use that to form the URL with which to =sync=
**** Share the chunks and packs documents with a ~peer~ installation
**** At the start of backup, sync with the ~peer~ to get latest chunks/packs
*** TODO Automatically prune backups more then N days old
**** For Google and Amazon, anything older than 90 days is free to remove
**** This would be a configuration setting, with defaults and path-specific
*** TODO Option to keep N daily, M weekly, and P monthly backups (a la Attic backup)
** Phase 6
*** TODO Consider how to deal with partial uploads (e.g. Minio/S3 has a means of handling these)
*** TODO Read cross platform Node.js guide: https://github.com/ehmicky/portable-node-guide
*** TODO Support Windows file types
**** ReadOnly
**** Hidden
**** System
*** TODO Support Amazon S3
*** TODO Support Amazon Glacier
**** c.f. https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/welcome.html
**** Offer user option to use "expedited" retrievals so they go faster
*** TODO Support Microsoft Azure blob storage
*** TODO Support Backblaze B2
*** TODO Support [[https://wiki.openstack.org/wiki/Swift][OpenStack Swift]]
*** TODO Support Wasabi
*** TODO Support Google Drive
*** TODO Support Dropbox
*** TODO Support Oracle Cloud Storage
*** TODO Support IBM Cloud Storage
*** TODO Support Rackspace Cloud Files
*** TODO Consider how to backup and restore FIFO, BLK, and CHR "files"
**** c.f. https://github.com/jborg/attic/blob/master/attic/archive.py
**** c.f. https://github.com/avz/node-mkfifo (for FIFO)
**** c.f. https://github.com/mafintosh/mknod (for BLK and CHR)
*** TODO Consider rewriting parts of core in Rust and compile to WebAssembly
**** Need to wait until WASM supports Rust std lib and file access
**** Node.js runs WebAssembly since v8
**** deduplication module can be replaced with Rust version
***** https://crates.io/crates/quickcdc
**** c.f. https://rustwasm.github.io/book/introduction.html
**** c.f. https://github.com/yushulx/webassembly-nodejs
**** Rust bcrypt: https://github.com/Keats/rust-bcrypt
**** Rust HMAC: https://www.crates.io/crates/hmac
**** Rust pbkdf2: https://crates.io/crates/pbkdf2
**** Rust stream ciphers: https://github.com/RustCrypto/stream-ciphers
**** Rust crypto option: https://github.com/miscreant/miscreant
**** Rust tool: https://github.com/rust-lang/rust-clippy
* Desktop App
** Phase N: Revery?
*** https://github.com/revery-ui/revery
*** ReasonML
*** React-like UI
*** Redux-like state management
*** Compiles to native
*** Would not be using CSS, presumably
*** Does it have support for systray?
*** Does it have support for dock icons?
** Phase N: Electron
*** TODO Write it in TypeScript
*** TODO Create a system tray icon/widget
**** Popup menu like Time Machine
**** Show current status, last backup
**** Action to open the app and examine snapshots
**** Action to open the app and check settings
* Product
** Name
*** Joseph suggests "Attic"
**** =atticapp.com= is taken
**** =attic.app= is for sale
**** Look for ~attic~ in different languages
**** Esperanto: ~mansardo~
***** also means something in Macedonian
**** Hawaiian: ~kaukau~
**** Latin: ~atticae~
