[package]
name = "server"
version = "0.1.0"
authors = ["Nathan Fiedler <nathanfiedler@fastmail.fm>"]
edition = "2021"
description = "Backup and restore application."
repository = "https://github.com/nlfiedler/zorigami"
readme = "README.md"
keywords = ["backup", "archival"]
license = "MIT"

[[bin]]
name = "server"
path = "src/main.rs"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
actix = { version = "0.13.0", optional = true }
actix-cors = { version = "0.7.0", optional = true }
actix-files = { version = "0.6.0", optional = true }
actix-rt = { version = "2.8.0", optional = true }
actix-web = { version = "4.3.0", optional = true }
anyhow = "1.0.55"
base64 = "0.22.1"
blake3 = "1.5.1"
blob-uuid = { version = "0.5.0", optional = true }
chrono = { version = "0.4", features = ["serde"] }
codee = { version = "0.3.0", features = ["json_serde"] }
console_log = "1.0.0"
console_error_panic_hook = "0.1.7"
database_core = { path = "../database/database_core", optional = true }
database_rocks = { path = "../database/database_rocks", optional = true }
dotenv = "0.15.0"
env_logger = { version = "0.11.0", optional = true }
exaf-rs = { version = "1.1.1", optional = true }
fastcdc = { version = "3.0.0", optional = true }
globset = { version = "0.4.13", optional = true }
gloo = "0.11.0"
juniper = { version = "0.16.1", features = ["chrono"], optional = true }
leptos = "0.7.8"
leptos_actix = { version = "0.7.8", optional = true }
leptos_meta = "0.7.8"
leptos_router = "0.7.8"
leptos-use = "0.15.7"
libc = { version = "0.2.119", optional = true }
log = "0.4.7"
memmap2 = { version = "0.9.4", optional = true }
os_str_bytes = { version = "7.0.0", features = [
    "conversions",
], optional = true }
reducer = { version = "3.0", optional = true }
send_wrapper = "0.6.0"
serde = { version = "1.0.182", features = ["derive"] }
serde_cbor = "0.11"
serde_json = "1.0.79"
server_fn = { version = "0.7.8", features = ["json", "cbor", "multipart", "url"] }
sha1 = "0.10.6"
store_amazon = { path = "../stores/store_amazon", optional = true }
store_azure = { path = "../stores/store_azure", optional = true }
store_core = { path = "../stores/store_core", optional = true }
store_google = { path = "../stores/store_google", optional = true }
store_local = { path = "../stores/store_local", optional = true }
store_minio = { path = "../stores/store_minio", optional = true }
store_sftp = { path = "../stores/store_sftp", optional = true }
tempfile = { version = "3.7.1", optional = true }
thiserror = "2.0.7"
ulid = { version = "1.1.2", optional = true }
uuid = { version = "1.1.2", features = ["serde", "v4", "v5"], optional = true }
# latest cargo-leptos wants wasm-bindgen 0.2.100 or higher
wasm-bindgen = "^0.2.100"
# leptos-use 0.15.7 requires web-sys 0.3.77 or higher
web-sys = { version = "^0.3.77", features = [
    "FormData",
    "HtmlFormElement",
    "XmlHttpRequest",
    "XmlHttpRequestUpload",
] }
whoami = { version = "1.5.1", optional = true }
xid = { version = "1.0.0", optional = true }

[target.'cfg(unix)'.dependencies]
xattr = "1.0.0"

[dev-dependencies]
mockall = "0.13.0"
rocksdb = "0.23.0"
serial_test = "3.0.0"

[features]
csr = ["leptos/csr"]
hydrate = ["leptos/hydrate"]
ssr = [
    "dep:actix",
    "dep:actix-cors",
    "dep:actix-files",
    "dep:actix-rt",
    "dep:actix-web",
    "dep:blob-uuid",
    "dep:database_core",
    "dep:database_rocks",
    "dep:env_logger",
    "dep:exaf-rs",
    "dep:fastcdc",
    "dep:globset",
    "dep:juniper",
    "dep:leptos_actix",
    "dep:libc",
    "dep:memmap2",
    "dep:os_str_bytes",
    "dep:reducer",
    "dep:store_amazon",
    "dep:store_azure",
    "dep:store_core",
    "dep:store_google",
    "dep:store_local",
    "dep:store_minio",
    "dep:store_sftp",
    "dep:tempfile",
    "dep:ulid",
    "dep:uuid",
    "dep:whoami",
    "dep:xid",
    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_router/ssr",
    "leptos-use/ssr",
    "leptos-use/actix",
]

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "server"
# The site root folder is where cargo-leptos generate all output. WARNING: all
# content of this folder will be erased on a rebuild. Use it in your server
# setup.
site-root = "target/site"
# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"
# [Optional] The source CSS file. If it ends with .sass or .scss then it will be
# compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before
# being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.scss"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "assets"
# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"
# The port to use for automatic reload monitoring
reload-port = 3001
# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"
#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"
# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"
# Sets the name of the binary target used.
#
# Optional, only necessary if the bin-package defines more than one target. Can
# also be set with the LEPTOS_BIN_TARGET=name env var
bin-target = "server"
# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
